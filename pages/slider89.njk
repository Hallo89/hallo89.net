<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1, maximum-scale=1">
    <meta charset="utf-8">
    <title>Slider89 | Hallo89</title>
    <link rel="stylesheet" href="/style/global.css">
    <link rel="stylesheet" href="/style/slider89/index.css">
    <script src="/js/global.js"></script>
    <script src="/js/global-themes.js"></script>
  </head>
  <body>
    {% set navContent %}
      <nav id="id-nav">
        <ul>
          <li><a href="#what">What is this?</a></li>
          <li><a href="#starting">Getting started</a></li>
          <li><a href="#Properties">Properties</a></li>
          <li><a href="#Methods">Methods</a></li>
          <li><a href="#HTML">HTML & CSS structure</a></li>
        </ul>
      </nav>
    {%- endset %}
    {% include 'templates/navbar.njk' %}

    <main>
      <h2 id="intro">
        <a href="#intro" class="icon-anchor">#</a>Introduction
      </h2>
      <section>
        <p>
          If you have at some point needed an input type=range while developing a website you'll know that they are awesome. They fit with a lot of use cases and are very convenient to both interact with as user and deal with as developer.<br>
          However, the restriction of not being able to style it very well is a point which isn't easy to ignore. People tell me that there are many ways to style a range input, to which I answer with the question whether approximately 80 lines of css (cross-browser support included) solely for one range input is worth it.
        </p>
        <p>
          This is why I made a library to solve this very problem: <em>Slider89</em>, which also happened to solve a lot more problems. How convenient!
        </p>

        <hr>

        <h3 id="what">
          <a href="#what" class="icon-anchor">#</a>What is this?
        </h3>
        <p>
          Slider89 is a very simple library for easily creating sliders (range inputs) for a webpage. Being based on custom HTML elements and Javascript instead of a built-in browser side &lt;input&gt;-element, it allows for full styling and behaviour customization. It is, for example, very useful for modifying values on the go.</p>
        <p>
          A basic slider can look like this (Its background-color is a bit darker but otherwise this is an all-default slider):
        </p>
        <div class="demo-block" id="demo-plain"></div>
        <p>
          Obviously, the default theme and configuration will not fit into everyone's design and use cases, but Slider89 is strong when it comes to customization. Beware, however, that it is still in an early alpha state and more features are yet to come.
        </p>
        <p>
          Please also note that while Slider89 is in the alpha state, everything may change without further warnings, including exposed getter/setter properties and functions.
        </p>

        <hr>

        <h3 id="starting">
          <a href="#starting" class="icon-anchor">#</a>Getting started
        </h3>
        <p>
          Slider89 is a client-side library (I don't know yet how useful it is to have it on NPM), so you first need to fetch the necessary files and load them up into your HTML document.<br>
          There are two ways of doing this: you can either download them from its repository on GitHub, <a href="https://github.com/Hallo89/Slider89">https://github.com/Hallo89/Slider89</a>, or fetch the files from the repo's website as seen below to always get the latest available version.<br>
          In both cases only two files are needed: <code>slider89.js</code> and <code>slider89.css</code>.<br>
          You'll then need to link them in your HTML file (first the download way):
        </p>
        <div class="code-copy-wrapper">
          <pre class="codeblock"><code>&lt;script src="<em>yourpath</em>/slider89.js"&gt;&lt;/script&gt;
&lt;link rel="stylesheet" href="<em>yourpath</em>/slider89.css"&gt;</code></pre>
          <button class="copy-btn">
            <span class="text">Copy</span>
            <div class="checkbox">
              <i class="mark lower"></i>
              <i class="mark upper"></i>
            </div>
          </button>
        </div>
        <p>
          or, fetching from the website:
        </p>
        <div class="code-copy-wrapper">
          <pre class="codeblock"><code>&lt;script src="https://hallo89.github.io/Slider89/slider89.js"&gt;&lt;/script&gt;
&lt;link rel="stylesheet" href="https://hallo89.github.io/Slider89/slider89.css"&gt;</code></pre>
          <button class="copy-btn">
            <span class="text">Copy</span>
            <div class="checkbox">
              <i class="mark lower"></i>
              <i class="mark upper"></i>
            </div>
          </button>
        </div>
        <p>
          Tip: I prefer to load both script and style at the end of the document (before the closing body tag) so that the page will build a tiny bit faster. That's because one will most likely not need the files before as the DOM needs to build up before one can interact with it, which makes sense.
        </p>
        <p>
          Now that everything is loaded up, we can start to create sliderz. All you have to know is the initialization method; everything else can be taken from the <a href="#docs">documentation section</a>.<br>
          To create one instance of a slider, we do the following in our Javascript:
        </p>
        <div class="codeblock">
          <code>const mySlider = new Slider89(targetElement);</code>
        </div>
        <p>
          We create a new instance of the <code>Slider89</code> class with the <code>new</code> operator and pass the DOM element we want the slider to be created in as argument into the function.<br>
          Assigning the instance to a variable is optional, it will be created in the given element one way or another, but without a variable one obviously can't do anything with the slider.<br>
          An all-default slider initialized plainly like this will look like the example you see above:
        </p>
        <div class="demo-block" id="demo-1-plain"></div>
        <p>
          As stated above, config options are available: to configure the slider, we pass an additional argument into the <a href="#Methods--Constructor">Slider89 constructor</a>, an object which we equip with <a href="#Properties--Configuration-properties">configuration properties</a>. Here's an example:
        </p>
        <pre class="codeblock"><code>const mySlider = new Slider89(targetElement, {
  min: -50,
  max: 175,
  value: 80
});</code></pre>
        <p>Which would turn out into this:</p>
        <div class="demo-block" id="demo-2-configged"></div>
      </section>

      <h2 id="docs">
        <a href="#docs" class="icon-anchor">#</a>Documentation
      </h2>

      <section id="section_docs">
        <p>This chapter will introduce all available methods, variables etc. with a thorough explanation.</p>
        <hr>
        <h3 class="no-anchor">Version selector</h3>
        <p>If you are restricted to a specific version, choose it here and the docs will adapt.</p>
        <div class="version-select">
          <div class="version-buttons">
            {%- for version in gitData -%}
            <button class="{{ version.tag-name | dotSnake }} {{- ' new' if version.new }} {{- ' active' if loop.first}}" type="button">{{ version.tag-name }}</button>
            {%- endfor -%}
          </div>
          <button class="toggle_btn" type="button">
            <span class="arrow">
              <span class="left"></span>
              <span class="right"></span>
            </span>
          </button>
          <div class="description">
            {% for version in gitData -%}
            <div class="version {{version.tag-name | dotSnake }} {{- ' active' if loop.first }}">
              <div class="header">
                <span class="date">Published on {{ version.date }}</span>
                <a href="{{ version.html-url }}">Go to release</a>
              </div>
              <div class="changelog">
                <span class="heading">What's new</span>
                <div class="body">
                  {{ version.body | safe }}
                </div>
              </div>
            </div>
            {% endfor -%}
          </div>
        </div>

        <hr>

        {%- macro indicatorVer(verObj, active = true) %}
          {% set displayVer = ('UNTIL ' if verObj.version_modifier == 'deprecated') + verObj.version -%}
          <span class="indicator-item v{{verObj.version | dotSnake}}
            {{- ' active' if active}}
            {{- ' new' if 'v' + verObj.version == gitData[0].tag-name}}
            {{- ' incompatible' if verObj.version_modifier == 'deprecated' and compareVer('v' + verObj.version, gitData[0].tag-name) == 'smaller' }}
            {{- ' deprecate' if verObj.version_modifier == 'deprecated' }}"><strong>{{ displayVer }}</strong></span>
        {%- endmacro -%}

        {%- macro propList(values, presets) -%}
          <dl class="doc-list">
            {%- for value, propVal in values -%}
              {# Property (min, max, etc.), [description, attributes, definitions] #}
              {% set propID = value | argondry | functName | kebab -%}
              {% if (propVal | isArray) or (propVal.version) -%} {# If the property has one or more versions #}
                <div id="{{ propID }}" class="list-item version-item {{- ' version-list' if not propVal.version}}">
                  {# Name -#}
                  {# Determining whether a class at <dt> needs to be added -#}
                  {% set multiNames = false -%}
                  {% if propVal | isArray -%}
                    {% for ver in propVal -%}
                      {% if ver.name -%}
                        {% set multiNames = true %}
                      {% endif -%}
                    {% endfor -%}
                  {% endif -%}
                  <dt class="{{ 'version-names' if multiNames }}">
                    <a href="#{{ propID }}"><code>{{ value | e | argonize | safe }}</code></a>{{ '<span class="_visuallyhidden">, </span>' | safe if multiNames }}
                    {%- if propVal | isArray -%}
                      {% for ver in propVal -%}
                        {% if ver.name -%}
                          <a href="#{{ propID }}" class="name_version v{{ ver.version | dotSnake }}"><code>{{ ver.name | e | argonize | safe }}</code></a>{{ '<span class="_visuallyhidden">, </span>' | safe if multiNames and not loop.last }}
                        {% endif -%}
                      {% endfor -%}
                    {% endif -%}
                  </dt>
                  {# Indicator -#}
                  <div class="indicator">
                    {% if propVal | isArray %}
                    <span class="_visuallyhidden">Versions: </span>
                      {%- for ver in propVal -%}
                        {{ indicatorVer(ver, loop.first) }}{{ '<span class="_visuallyhidden">,</span>' | safe if not loop.last}}
                      {%- endfor -%}
                    {% else -%}
                      <span class="_visuallyhidden">Version: </span>
                      {{ indicatorVer(propVal) }}
                    {% endif -%}
                  </div>
                  {# versions -#}
                  {% if propVal | isArray -%}
                    <div class="versions">
                    {% for ver in propVal -%}
                      <span class="_visuallyhidden">Version {{ ver.version }}</span>
                      <div class="prop-version v{{ver.version | dotSnake}} {{- ' active' if loop.first}} {{- ' right' if not loop.first}}">
                        {{ docItem(value, ver, presets) }}
                      </div>
                    {% endfor -%}
                    </div>
                  {% else -%}
                    <div class="v{{propVal.version | dotSnake}}">
                      {{ docItem(value, propVal, presets) }}
                    </div>
                  {% endif -%}
                </div>
              {% else -%} {# If the property doesn't have multiple versions #}
                <div id="{{ propID }}" class="list-item">
                  {{ docItem(value, propVal, presets) }}
                </div>
              {% endif -%}
            {% endfor -%}
          </dl>
        {% endmacro -%}

        {%- macro docItem(name, value, presets) -%}
          {% if value.version is undefined -%}
            <dt>
              <a href="#{{ name | argondry | functName | kebab }}"><code>{{ name | e | argonize | safe }}</code></a>
            </dt>
          {% endif -%}
          {% if value.version_modifier -%}
            {% if value.version_modifier == 'deprecated' -%}
              <div class="doc-item version-notice {{- ' active' if compareVer('v' + value.version, gitData[0].tag-name) == 'smaller' }}">Deprecated since {{ value.version | incrVer(gitData) }}{{ (' in favor of <code>' + value.version_successor | e | argonize + '</code>') | safe if value.version_successor }}</div>
            {% endif -%}
          {% endif -%}
          <dd class="doc-item description">
            {{ value.description | e | argonize | safe }}
          </dd>
          {%- set val = concatObj([presets, value]) -%}
          {# state #}
          {% if val.state -%}
            <dd class="doc-item info-item special-item state">
              <span class="nodisplay">{{'└ ' if loop.last else '├ '}}</span>
              <strong>{{val.state}}</strong>
            </dd>
          {% endif -%}
          {# history (predecessor, successor, ...) #}
          {% if value.version_predecessor or value.version_successor -%}
            {%- set content = value -%}
            <dd class="doc-item info-item">
              <span class="nodisplay">{{'└ ' if loop.last else '├ '}}</span>
              {{'Predecessor' if value.version_predecessor else 'Successor'}}: <code>{{ (value.version_successor if value.version_successor else value.version_predecessor) | e | argonize | safe }}</code>
            </dd>
          {% endif -%}
          {# definitions #}
          {% if val.definitions -%}
            <dd class="doc-item info-item">
              <span class="nodisplay">{{'└ ' if loop.last else '├ '}}</span>
              Definitions:<div class="definitions">
                {% for def, defVal in val.definitions -%}
                  <div class="definition">
                    <span class="nodisplay">│ </span>
                    <code>{{def}}</code> = {{defVal | e | argonize | safe}}
                  </div>
                {% endfor -%}
              </div>
            </dd>
          {% endif -%}
          {# attributes #}
          {% for attr, attrVal in val.attributes -%}
            <dd class="doc-item info-item">
              <span class="nodisplay">{{'└ ' if loop.last else '├' }}</span>
              {{attr}}: {{attrVal | e | argonize | separate(['\\s+OR', ','], 'code') | safe}}
            </dd>
          {% endfor -%}
        {% endmacro -%}

        {%- for section, sectionVal in data -%}
          {# Docs h3 (Properties, etc.), [description, categories] | in the whole json #}
          {% set sectionID = section | firstword -%}
            <h3 id="{{ sectionID }}"><a href="#{{ sectionID }}" class="icon-anchor">#</a>{{ section }}</h3>
          {% if sectionVal.description -%}
            <p>{{ sectionVal.description | e | argonize | safe }}</p>
          {% endif -%}
          {% if sectionVal.categories -%}
            {% for category, categoryVal in sectionVal.categories -%}
              {# Category under one section (Read only, etc.), [description, values, ...] #}
              {% set categoryID = (section | firstword) + '--' + (category | argondry | kebab) -%}
              {% set presets = categoryVal.presets -%}
              <div class="list-section" id="{{ categoryID }}">
                <h4>
                  <a href="#{{ categoryID }}" class="icon-anchor">#</a>
                  <span>{{ category | e | argonize | safe }}</span>
                  <button class="expand-button {{-' active' if categoryVal.collapsed == true}}">
                    <div class="symbols">
                      <span class="symbol plus">+</span>
                      <span class="symbol minus">-</span>
                    </div>
                  </button>
                </h4>
                <div class="collapsible {{-' collapsed' if categoryVal.collapsed == true}}">
                  {% if categoryVal.description -%}
                  <p>{{ categoryVal.description | e | argonize | safe }}</p>
                  {% endif -%}
                  {{ propList(categoryVal.values, categoryVal.presets) }}
                </div>
              </div>
            {% endfor -%}
          {% else -%}
            {{ propList(sectionVal.values, sectionVal.presets) }}
          {% endif -%}
        {% endfor -%}

      </section>
    </main>

    {% include "templates/footer.njk" %}

    <link rel="stylesheet" href="/style/slider89/fonts.css">
    <script>
      const h4s = document.getElementsByTagName('h4');
      const versionSwitch = document.querySelector('.version-select .version-buttons');
      const vSwitchBtns = versionSwitch.getElementsByTagName('button');
      const vSwitchDescript = versionSwitch.parentNode.querySelector('.description');
      const vSwitchToggle = versionSwitch.parentNode.querySelector('.toggle_btn');
      const copyBtns = document.querySelectorAll('.code-copy-wrapper .copy-btn');
      const indicatorItems = document.querySelectorAll('.list-item.version-list .indicator .indicator-item');
      const versionItems = document.getElementsByClassName('version-item');

      const newestVer = formatVersion(vSwitchBtns[0].textContent);

      vSwitchToggle.addEventListener('click', toggleVersionDescription);
      for (let i = 0; i < indicatorItems.length; i++) indicatorItems[i].addEventListener('click', switchCardVersion);
      for (let i = 0; i < h4s.length; i++) h4s[i].addEventListener('click', toggleCollapsible);
      for (let i = 0; i < vSwitchBtns.length; i++) vSwitchBtns[i].addEventListener('click', switchGlbVersion);
      for (let i = 0; i < copyBtns.length; i++) copyBtns[i].addEventListener('click', copyCode);

      function toggleVersionDescription() {
        if (vSwitchDescript.classList.contains('collapsed')) {
          const activeVersion = vSwitchDescript.querySelector('.version.active');
          vSwitchDescript.style.height = '0';
          setTimeout(function() {
            vSwitchDescript.style.height = activeVersion.clientHeight + 'px';
            setTimeout(function() {
              vSwitchDescript.style.height = '';
            }, 200);
          }, 20);
          vSwitchDescript.classList.remove('collapsed');
          this.classList.remove('down');
        } else {
          vSwitchDescript.style.height = vSwitchDescript.clientHeight + 'px';
          setTimeout(function() {
            vSwitchDescript.style.height = '0';
            setTimeout(function() {
              vSwitchDescript.style.height = '';
            }, 200);
          }, 20);
          vSwitchDescript.classList.add('collapsed');
          this.classList.add('down');
        }
      }

      function switchCardVersion() {
        if (this.classList.contains('active')) return;
        const version = this.classList[1];
        const vProps = this.parentNode.parentNode.querySelectorAll('.versions .prop-version');
        for (let i = 0; i < vProps.length; i++) {
          if (vProps[i].classList.contains(version)) {
            var clickPos = i;
            break;
          }
        }
        changePropVersion(vProps, clickPos, this);
      }

      function switchGlbVersion() {
        if (this.classList.contains('active')) return;
        versionSwitch.querySelector('button.active').classList.remove('active');
        this.classList.add('active');
        const thisDescript = vSwitchDescript.querySelector('.version.active');
        const nextDescript = vSwitchDescript.querySelector('.version.' + this.classList[0]);
        if (!vSwitchDescript.classList.contains('collapsed')) {
          vSwitchDescript.style.height = vSwitchDescript.clientHeight + 'px';
          setTimeout(function() {
            vSwitchDescript.style.height = nextDescript.clientHeight + 'px';
            setTimeout(function() {
              vSwitchDescript.style.height = '';
            }, 200);
          }, 10);
        }
        thisDescript.classList.remove('active');
        thisDescript.classList.add('bottom');
        nextDescript.classList.add('active');
        setTimeout(function() {
          thisDescript.classList.remove('bottom');
        }, 200);
        //e.g 0.2.0 becomes 1020
        const selectVer = formatVersion(this.textContent);
        for (let i = 0; i < versionItems.length; i++) {
          const indicChilds = versionItems[i].querySelector('.indicator').getElementsByClassName('indicator-item');
          const notice = versionItems[i].querySelector('.version-notice');
          let propLock = false;
          for (let n = 0; n < indicChilds.length; n++) {
            const ver = formatVersion(indicChilds[n].classList[1]);
            indicChilds[n].classList.remove('current');
            indicChilds[n].classList.remove('incompatible');
            if (indicChilds[n].classList.contains('deprecate')) {
              notice.classList.remove('active');
              if (selectVer > ver) {
                indicChilds[n].classList.add('incompatible');
                notice.classList.add('active');
              }
            } else if (selectVer < ver && !indicChilds[n].classList.contains('deprecate')) {
              indicChilds[n].classList.add('incompatible');
            } else if (selectVer == ver && ver != newestVer) {
              indicChilds[n].classList.add('current');
            }
            if (selectVer >= ver && !propLock && versionItems[i].classList.contains('version-list')) {
              changePropVersion(versionItems[i].lastElementChild.getElementsByClassName('prop-version'), n, indicChilds[n]);
              propLock = true;
            }
          }
        }
      }

      function formatVersion(ver) {
        return parseInt('1' + ver.slice(1).replace(/[_\.]/g, ''));
      }

      function changePropVersion(props, target, indicChild) {
        const clickHeight = props[target].clientHeight;
        const vNames = props[0].parentNode.parentNode.querySelector('.version-names');
        if (vNames) {
          const activeName = vNames.querySelector('a.active');
          const vNameMatch = vNames.querySelector('a.' + indicChild.classList[1]);
          if (activeName) activeName.classList.remove('active');
          if (vNameMatch) {
            if (vNameMatch.clientWidth < vNames.children[0].clientWidth) vNames.children[0].classList.add('inactive');
            vNameMatch.classList.add('active');
          }
          if (!vNameMatch && activeName && vNames.children[0].classList.contains('inactive')) vNames.children[0].classList.remove('inactive');
        }
        for (let i = 0; i < props.length; i++) {
          if (target > i) {
            props[i].classList.add('left');
            props[i].classList.remove('right');
          } else if (target < i) {
            props[i].classList.add('right');
            props[i].classList.remove('left');
          }
          if (props[i].classList.contains('active')) {
            if (i == target) break;
            props[target].setAttribute('style', 'height:' + props[i].clientHeight + 'px');
            props[i].classList.remove('active');
          } else if (i == target) {
            props[i].classList.add('active');
          }
        }
        setTimeout(function() {
          props[target].setAttribute('style', 'height:' + clickHeight + 'px');
          setTimeout(function() {
            props[target].setAttribute('style', '');
          }, 125);
        }, 20);
        indicChild.parentNode.querySelector('.indicator-item.active').classList.remove('active');
        indicChild.classList.add('active');
      }

      function copyCode() {
        const codeblock = this.previousElementSibling;
        const selection = window.getSelection();
        const ranges = new Array(selection.rangeCount);
        for (let i = 0; i < selection.rangeCount; i++) {
          ranges[i] = selection.getRangeAt(i);
        }
        const range = document.createRange();
        range.selectNode(codeblock);
        selection.removeAllRanges();
        selection.addRange(range);
        document.execCommand('copy');
        range.detach();
        selection.removeAllRanges();
        for (let i of ranges) {
          selection.addRange(i);
          i.detach();
        }
        this.classList.add('active');
        const that = this;
        setTimeout(function() {
          that.classList.remove('active');
        }, 900);
      }

      function toggleCollapsible(e) {
        if (!e.target.classList.contains('icon-anchor')) {
          this.lastElementChild.classList.toggle('active');
          this.nextElementSibling.classList.toggle('collapsed');
        }
      }
    </script>
    <link rel="stylesheet" href="https://hallo89.github.io/Slider89/slider89.css">
    <script src="https://hallo89.github.io/Slider89/slider89.js"></script>
    <script>
      new Slider89(document.getElementById('demo-plain'));
      new Slider89(document.getElementById('demo-1-plain'));
      new Slider89(document.getElementById('demo-2-configged'), {min: -50, max: 175, value: 80});
    </script>
  </body>
</html>
