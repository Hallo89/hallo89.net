<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Slider89 | Hallo89</title>
    <link rel="stylesheet" href="../global.css">
    <link rel="stylesheet" href="../slider89.css">
    <script src="../global.js"></script>
  </head>
  <body>
    {% import 'templates/navbar.njk' as navbar %}

    {% call navbar.navbar(page, 'h1', false, true) %}
    <nav id="id_nav">
      <a href="#what">What is this?</a>
      <a href="#starting">Getting started</a>
      <a href="#properties">Properties</a>
      <a href="#functions">Methods</a>
      <a href="#structure">HTML & CSS structure</a>
    </nav>
    {%- endcall %}
    <main id="main_article">
      <h2 id="intro">
        <a href="#intro" class="icon_anchor">#</a>Introduction
      </h2>
      <section>
        <p>
          If you have at some point needed an input type=range while developing a website you'll know that they are awesome. They fit with a lot of use cases and are very convenient to both interact with as user and deal with as developer.<br>
          However, the restriction of not being able to style it very well is a point which isn't easy to ignore. People tell me that there are many ways to style a range input, to which I answer with the question whether approximately 80 lines of css (cross-browser support included) solely for one range input is worth it.
        </p>
        <p>
          This is why I wrote a framework to solve this very problem: <em>Slider89</em>, which also happened to solve a lot more problems and make life much easier. How convenient!
        </p>

        <hr>

        <h3 id="what">
          <a href="#what" class="icon_anchor">#</a>What is this?
        </h3>
        <p>
          Slider89 is a very simple framework for easily creating css sliders (range inputs). Being based on javascript and custom elements with CSS instead of a built-in browser-side &lt;input&gt;-element, it features full styling customizability but allows for rich configuration on the technical side as well. It is very useful for modifying values on the go, as an example.</p>
        <p>
          A basic slider can look like this (Its background-color is a bit darker but otherwise this is an all-default slider):
        </p>
        <div class="demo_block" id="demo_plain"></div>
        <p>
          The values are automatically computed based on the slider's minimum and maximum values
        </p>

        <hr>

        <h3 id="starting">
          <a href="#starting" class="icon_anchor">#</a>Getting started
        </h3>
        <p>
          Like usual when needing external resources, you first need to fetch the necessary files and load them up into your HTML document.<br>
          There are two ways of doing this: you can either download them from the github repository, <a href="https://github.com/Hallo89/Slider89">https://github.com/Hallo89/Slider89</a>, or fetch the files from the repository's website as seen below to <em>always</em> get the latest available version.<br>
          In both cases only two files are needed: <code>slider89.js</code> and <code>slider89.css</code><br>
          You'll then need to link them in your HTML file like so:
        </p>
        <div class="code_wrapper copyable">
          <pre class="codeblock copyable"><code>&lt;script src="<em>yourpath</em>/slider89.js"&gt;&lt;/script&gt;
&lt;link rel="stylesheet" href="<em>yourpath</em>/slider89.css"&gt;</code></pre>
          <button class="copy_icon">
            <span class="text">Copy</span>
            <div class="checkbox">
              <i class="mark lower"></i>
              <i class="mark upper"></i>
            </div>
          </button>
        </div>
        <p>
          or, fetching from the website:
        </p>
        <div class="code_wrapper copyable">
          <pre class="codeblock"><code>&lt;script src="https://hallo89.github.io/Slider89/slider89.js"&gt;&lt;/script&gt;
&lt;link rel="stylesheet" href="https://hallo89.github.io/Slider89/slider89.css"&gt;</code></pre>
          <button class="copy_icon">
            <span class="text">Copy</span>
            <div class="checkbox">
              <i class="mark lower"></i>
              <i class="mark upper"></i>
            </div>
          </button>
        </div>
        <p>
          Tip: I prefer to load both the script and style at the end of the document to squeeze an extra bit of speed out of the page because, given that the scripts are also at the end of the document which is usual practice, one will not need them before.
        </p>
        <p>
          Now that everything is loaded up, we can start to create sliderz. All you have to know is the initialization method; everything else can be taken from the <a href="#doc">documentation</a> section.<br>
          To create one instance of a slider, we do the following in our javascript:
        </p>
        <div class="codeblock">
          <code>var mySlider = new Slider89(targetElement);</code>
        </div>
        <p>
          This is pretty straightforward: we create a new instance of the <code>Slider89</code> class with the <code>new</code> operator and pass the HTML-element we want the slider to be created in as paramter into the function.<br>
          Lastly, we obviously have to store the slider in a variable to be able to access it in future code (it is also valid not to use a variable, I'm doing this with the demos on this page for example, but this is a very rare case as you cannot do anything with it after initialization).<br>
          An all-default slider initialized plainly like this will look like the example you see above:
        </p>
        <div class="demo_block" id="demo_1_plain"></div>
        <p>
          However, what would a framework be without means of configuration? To configure it we pass an additional parameter as object into the <a href="#functions-constructor">Slider89 constructor </a> which we fill with <a href="#properties-config">configuration-properties</a>. Here's an example:
        </p>
        <pre class="codeblock"><code>var mySlider = new Slider89(targetElement, {
  min: -50,
  max: 175,
  value: 80
});</code></pre>
        <p>Which would turn out into this:</p>
        <div class="demo_block" id="demo_2_configged"></div>
      </section>

      <h2 id="doc">
        <a href="#doc" class="icon_anchor">#</a>Documentation
      </h2>

      <section id="section_docs">
        <div class="version_switch">
          <strong>Version-select: </strong>
          <span class="version_buttons">
            {%- for version in gitData -%}
              <button class="{{ version.tag_name | replace('.', '_') }} {{- ' active' if loop.first}}" type="button">{{ version.tag_name }}</button>
            {%- endfor -%}
          </span>
        </div>
        <p>This chapter will introduce all available methods, variables etc. with a thorough explanation</p>

        <hr>

        {% macro propList(values, presets) %}
          <dl class="doc_list">
            {%- for value, propVal in values -%}
              {# Property (min, max, etc.), [description, attributes, definitions] #}
              {% if (propVal | isArray) or (propVal.version) -%} {# If the property has one or more versions #}
                <div id="{{ value | kebab }}" class="list_item version_item {{- ' version_list' if not propVal.version}}">
                  <dt><a href="#{{ value | kebab }}"><code>{{ value }}</code></a></dt>
                  <div class="indicator">
                    {% if propVal | isArray %}
                      {%- for ver in propVal -%}
                      <span class="indicator_item v{{ver.version | replace('.', '_')}} {{- ' active' if loop.first}} noselect"><strong>{{ ver.version }}</strong></span>
                      {%- endfor -%}
                    {% else %}
                      <span class="indicator_item v{{propVal.version | replace('.', '_')}} noselect"><strong>{{ propVal.version }}</strong></span>
                    {% endif %}
                  </div>
                  {% if propVal | isArray %}
                    <div class="versions">
                    {% for ver in propVal -%}
                      <div class="prop_version v{{ver.version | replace('.', '_')}} {{- ' active' if loop.first}} {{- ' right' if not loop.first}}">
                        {{ docItem(value, ver, presets) }}
                      </div>
                    {% endfor -%}
                    </div>
                  {% else %}
                    <div class="v{{propVal.version | replace('.', '_')}}">
                      {{ docItem(value, propVal, presets) }}
                    </div>
                  {% endif %}
                </div>
              {% else -%} {# If the property doesn't have multiple versions #}
                <div id="{{ value | kebab }}" class="list_item">
                  {{ docItem(value, propVal, presets) }}
                </div>
              {% endif -%}
            {% endfor -%}
          </dl>
        {% endmacro -%}

        {%- macro docItem(name, value, presets) %}
          {% if value.version is undefined -%}
          <dt>
            <a href="#{{ name | kebab }}"><code>{{ name }}</code></a>
          </dt>
          {% endif -%}
          <dd class="doc_item description">
            {{ value.description | e | argonize | safe }}
          </dd>
          {% set attributes = concatObj([presets.attributes, value.attributes]) -%}
          {% for attr, attrVal in attributes -%}
          <dd class="doc_item info_item {{-' state' if attr == 'state'}}">
            <span class="nodisplay">{{"└ " if loop.last else "├"}}</span>
            {% if attr == 'state' -%}
            <strong>{{attrVal | e | argonize | safe}}</strong>
            {% else -%}
            {{attr}}: {{attrVal | e | separate(['\\s+OR', ','], 'code') | argonize | safe}}
            {% endif -%}
          </dd>
          {% endfor -%}
        {% endmacro -%}

        {% for section, sectionVal in data -%}
          {# Docs h3 (Properties, etc.), [description, categories] | in the whole json #}
          <h3><a href="#{{ section | kebab }}" class="icon_anchor">#</a>{{ section }}</h3>
          {% if sectionVal.description -%}
          <p>{{ sectionVal.description | e | argonize | safe }}</p>
          {% endif -%}
          {% if sectionVal.categories -%}
            {% for category, categoryVal in sectionVal.categories -%}
              {# Category under one section (Read only, etc.), [description, values, ...] #}
              {% set categoryID = '#' + (section | lower | firstword) + '--' + (category | kebab) -%}
              {% set presets = categoryVal.presets -%}
              <div class="list_container" id="{{ categoryID }}">
                <h4>
                  <span>{{ category | e | argonize | safe }}</span>
                  <button class="expand_button {{-' active' if categoryVal.collapsed == true}}">
                    <div class="symbols">
                      <span class="symbol plus">+</span>
                      <span class="symbol minus">-</span>
                    </div>
                  </button>
                  <a href="{{ categoryID }}" class="icon_anchor">#</a>
                </h4>
                <div class="collapsible {{-' collapsed' if categoryVal.collapsed == true}}">
                  {% if categoryVal.description -%}
                  <p>{{ categoryVal.description | e | argonize | safe }}</p>
                  {% endif -%}
                  {{ propList(categoryVal.values, categoryVal.presets) }}
                </div>
              </div>
            {% endfor -%}
          {% else -%}
            {{ propList(sectionVal.values, sectionVal.presets) }}
          {% endif -%}
        {% endfor -%}

      </section>
    </main>

    <script>
      const versionSwitch = document.querySelector('.version_switch');
      const vSwitchBtns = versionSwitch.querySelectorAll('button');
      const copyBtns = document.querySelectorAll('.copyable .copy_icon');
      const indicatorItems = document.querySelectorAll('.list_item.version_list .indicator .indicator_item');
      const h4s = document.getElementsByTagName('h4');

      for (let i = 0; i < indicatorItems.length; i++) indicatorItems[i].addEventListener('click', switchCardVersion);
      for (let i = 0; i < h4s.length; i++) h4s[i].addEventListener('click', toggleCollapsible);
      for (let i = 0; i < vSwitchBtns.length; i++) vSwitchBtns[i].addEventListener('click', switchGlobalVersion);
      for (let i = 0; i < copyBtns.length; i++) copyBtns[i].addEventListener('click', copyCode);

      function switchCardVersion() {
        if (this.classList.contains('active')) return;
        const version = this.classList[1];
        const vProps = this.parentNode.parentNode.querySelectorAll('.versions .prop_version');
        let clickPos;
        for (let i = 0; i < vProps.length; i++) {
          if (vProps[i].classList.contains(version)) {
            clickPos = i;
            break;
          }
        }
        for (let i = 0; i < vProps.length; i++) {
          if (clickPos > i) {
            vProps[i].classList.add('left');
            vProps[i].classList.remove('right');
          } else if (clickPos < i) {
            vProps[i].classList.add('right');
            vProps[i].classList.remove('left');
          }
          if (vProps[i].classList.contains('active')) {
            vProps[i].classList.remove('active');
          } else if (i == clickPos) {
            vProps[i].classList.add('active');
          }
        }
        this.parentNode.querySelector('.indicator_item.active').classList.remove('active');
        this.classList.add('active');
      }

      function copyCode() {
        const codeblock = this.previousElementSibling;
        const selection = window.getSelection();
        const ranges = new Array(selection.rangeCount);
        for (let i = 0; i < selection.rangeCount; i++) {
          ranges[i] = selection.getRangeAt(i);
        }
        const range = document.createRange();
        range.selectNode(codeblock);
        selection.removeAllRanges();
        selection.addRange(range);
        document.execCommand('copy');
        range.detach();
        selection.removeAllRanges();
        for (let i of ranges) {
          selection.addRange(i);
          i.detach();
        }
        this.classList.add('active');
        const that = this;
        setTimeout(function() {
          that.classList.remove('active');
        }, 900);
      }

      function switchGlobalVersion() {
        if (!this.classList.contains('active')) {
          versionSwitch.querySelector('button.active').classList.remove('active');
          this.classList.add('active');
        }
      }

      function toggleCollapsible(e) {
        if (!e.target.classList.contains('icon_anchor')) {
          this.children[this.children.length - 2].classList.toggle('active');
          this.nextElementSibling.classList.toggle('collapsed');
        }
      }
    </script>
    <link rel="stylesheet" href="https://hallo89.github.io/Slider89/slider89.css">
    <script src="https://hallo89.github.io/Slider89/slider89.js"></script>
    <script>
      new Slider89(document.getElementById('demo_plain'));
      new Slider89(document.getElementById('demo_1_plain'));
      new Slider89(document.getElementById('demo_2_configged'), {min: -50, max: 175, value: 80});
    </script>
  </body>
</html>
