<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1">
    <meta charset="utf-8">
    <meta name="theme-color" content="#17469E">
    <meta name="author" content="Hallo89">
    <meta name="description" content="I'm a hobby web developer and this is the website for all my projects and web development experiments!">
    <meta property="og:title" content="Hallo89">
    <meta property="og:type" content="website">
    <meta property="og:description" content="Hallo89.net is the website for all of my projects and web development experiments.">
    <meta property="og:url" content="https://hallo89.net/">
    <meta property="og:image" content="/image/Avatar.png">
    <title>Hallo89</title>
    <link rel="icon" href="favicon.ico">
    <link rel="stylesheet" href="/style/global.css">
    <link rel="stylesheet" href="/style/main.css">
    <script src="/js/global.js"></script>
    <script src="/js/global-themes.js"></script>
    <script>
      const randomSubheader = [
        "An ode to Nesewebel",
        "A tale of SparxDev",
        "Rectangulous precipitation",
        "Numerical apparatus",
        "An acceptable website",
        "Geometrical calculation",
        "Graphical utilization",
        "Resourceful bundling",
        "Component-relative outlaying",
        "Anumismatic fragment painting",
        "[object WebDeveloper]"
      ];
    </script>
  </head>
  <body>

    <header id="header">
      <h1 class="landing-animation">
        <span data-count="1">H</span
        ><span data-count="2">a</span
        ><span data-count="3">l</span
        ><span data-count="4">l</span
        ><span data-count="5">o</span
        ><span data-count="6">8</span
        ><span data-count="7">9</span>
      </h1>
      <em class="subheader">
        <script>
          document.write(randomSubheader[Math.floor(randomSubheader.length*Math.random())]);
        </script>
      </em>
      {% include 'templates/mode-switch.njk' %}
    </header>

    <nav id="gbl-box-menu">
      {% include 'templates/box-list.njk' %}
    </nav>

    {% include "templates/footer.njk" %}

    <script>
      const h1 = document.querySelector('#header h1');
      let timeoutID;
      let currentSpan;

      const TEXTLEN = h1.textContent.trim().length;
      const LANDING_ANIMATION_DURATION = .82378487;
      const Animation = {
        ROOT: 1.375,
        DURATION: .37,
        DELAY: .13
      };

      h1.addEventListener('click', h1Click);
      h1.addEventListener('mousemove', h1Move);
      h1.addEventListener('mouseleave', h1Leave);

      setTimeout(function() {
        h1.classList.remove('landing-animation');
      }, LANDING_ANIMATION_DURATION * 1000);

      function h1Click(e) {
        const target = e.target;
        if (target.tagName != 'H1') {
          for (var i = 1; i <= TEXTLEN; i++) {
            h1.classList.remove('wave' + i);
          }
          if (timeoutID != null) clearTimeout(timeoutID);
          void h1.offsetHeight; // Trigger a document reflow

          const count = target.dataset.count;
          // These calculations mirror the used CSS animation's timings
          const iterations = Math.abs(Number(count) - Math.ceil(TEXTLEN / 2)) + Math.ceil(TEXTLEN / 2);
          const runTime = Animation.DURATION + Animation.DELAY * Math.pow(iterations - 1, 1 / Animation.ROOT);

          h1.classList.add('wave' + count);
          timeoutID = setTimeout(function() {
            h1.classList.remove('wave' + count);
          }, runTime * 1000);
        }
      }
      function h1Move(e) {
        const target = e.target;
        if (target.tagName != 'H1' && target != currentSpan) {
          if (currentSpan) toggleAdjacentNodes(currentSpan, 2, 'remove');

          toggleAdjacentNodes(target, 2, 'add');

          currentSpan = e.target;
        }
      }
      function h1Leave() {
        toggleAdjacentNodes(currentSpan, 2, 'remove');
        currentSpan = null;
      }

      function toggleAdjacentNodes(node, depth, operation, dir, i) {
        if (i == null) i = 0;
        if (!node || i > depth) return;
        node.classList[operation]('scale' + (i + 1));
        if (!dir || dir == 'prev') toggleAdjacentNodes(node.previousElementSibling, depth, operation, 'prev', i + 1);
        if (!dir || dir == 'next') toggleAdjacentNodes(node.nextElementSibling, depth, operation, 'next', i + 1);
      }
    </script>
  </body>
</html>
