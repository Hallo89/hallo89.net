// main: global.less|main.less|slider89/index.less

#for(@end-inclusive, @rule) {
  each(range(@end-inclusive), {
    // @index: 1 based
    // @idx: 0 based
    @idx: @index - 1;
    @rule();
  });
}

.noselect() {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.focus(@active-ruleset, @disabled-ruleset) {
  &:focus {
    @active-ruleset();
  }
  @supports selector(:focus-visible) or selector(:-moz-focusring) {
    &:focus {
      @disabled-ruleset();
    }
  }
  // NOTE: If one of multiple comma-separated pseudo-classes is unknown to the browser, the whole selector fails
  &:-moz-focusring {
    @active-ruleset();
  }
  &:focus-visible {
    @active-ruleset();
  }
}

.mode-transition() {
  .background() {
    transition+: background .15s linear;
  }
  .shadow() {
    transition+: box-shadow .15s linear;
  }
  .color() {
    transition+: color .15s linear;
  }
  .textshadow() {
    transition+: text-shadow .15s linear;
  }
  .border() {
    transition+: border .15s linear;
  }
}

.drop-shadow(@amount, @color, @it: 0) {
  & when not (@it = 0) {
    text-shadow+: unit(@it, px) unit(@it, px) @color;
  }
  & when (@it < @amount) {
    text-shadow+: @it + .5px @it + .5px @color;
    .drop-shadow(@amount, @color, @it + 1);
  }
}

.wave() {
  .generate-targets(@textlen, @class, @animation) {
    each(range(@textlen), {
      &.@{class}@{index} span {
        .wave.target(@textlen, @index, @animation);
      }
    });
  }
  .target(@textlen, @target, @animation, @it: 0) {
    @half: ceil((@textlen / 2));
    & when (@it < abs(@target - @half) + @half) {
      @next: @target + @it;
      @prev: @target - @it;
      & when (@prev > 0) and (@next <= @textlen) and not (@next = @prev) {
        &:nth-child(@{next}),
        &:nth-child(@{prev}) {
          @animation();
        }
      }
      & when not (@prev > 0) or (@next = @prev) {
        &:nth-child(@{next}) {
          @animation();
        }
      }
      & when not (@next <= @textlen) {
        &:nth-child(@{prev}) {
          @animation();
        }
      }
      .wave.target(@textlen, @target, @animation, @it + 1);
    }
  }
  .keyframe() {
    .textWaveLanding(@shadow-length: 8) {
      @keyframes textWaveLanding {
        0% {
          transform: scale(.775);
          color: transparent;
          text-shadow: none;
        }
        60% {
          color: inherit;
          transform: scale(1.0675) translateY(.012em);
          .drop-shadow(@shadow-length, @heading-shadow);
          text-shadow+: @shadow-length + .5px @shadow-length + .5px @heading-shadow;
        }
      }
    }
    .textWave(@shadow-length: 9) {
      @keyframes textWave {
        25% {
          transform: scale(.9375);
        }
        60% {
          transform: scale(1.0475) translateY(.0115em);
          .drop-shadow(@shadow-length, @heading-shadow);
        }
      }
    }
  }
}
