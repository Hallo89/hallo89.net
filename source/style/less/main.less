// out: ../css/main.css, sourcemap: false, compress: false,

/*
Written by Hallo89 using LESS CSS - http://lesscss.org
No necessity to write this in here but Less is awesome!
*/

@import (reference) 'colors';
@import (reference) 'mixins';

/* R-Flex by Vikers converted to WOFF & WOFF2 */
@font-face {
  font-family: 'R-Flex';
  font-weight: bold;
  font-display: swap;
  src:
    local('RFlex'),
    local('RFlexBold'),
    local('RFlex-Bold'),
    url('/font/RFlex/RFlex-Bold.woff2') format('woff2'),
    url('/font/RFlex/RFlex-Bold.woff') format('woff');
}

body {
  margin: 0;
}

#modes {
  position: absolute;
  top: .4em;
  right: .4em;
  font-size: 1.69em;
  .mode-gear .icon {
    animation: .6s modeIconIn ease;
    @keyframes modeIconIn {
      from {
        transform: rotate(90deg);
        opacity: 0;
      }
    }
  }
}

@h1-font-size: 8em;
#header {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  height: calc(12.5vw + 22vh + 3px);
  .mode-transition.background();
  .mode-transition.shadow();
  h1 {
    font-family: 'R-Flex', 'Futura PT', 'Century Gothic', 'Segoe UI', 'San Francisco', sans-serif;
    font-weight: bold;
    font-size: @h1-font-size;
    text-transform: uppercase;
    letter-spacing: 1.5px;
    white-space: nowrap;
    margin: 0;
    transition+: transform .76s;
    cursor: default;
    .drop-shadow(8, hsl(0, 0%, 62%));
    .mode-transition.textshadow();
    .mode-transition.color();

    // --- hover & wave animations ---
    span {
      display: inline-block;
      transition: transform .125s ease;
      // don't use the hover effect on touch-based devices because it interferes with the wave
      @media (hover: hover) {
        &.scale1 {
          transform: scale(.9075);
        }
        &.scale2 {
          transform: scale(.94);
        }
        &.scale3 {
          transform: scale(.9825);
        }
      }
      &:active {
        transform: scale(.875);
      }
    }

    &.landing-animation span {
      .wave.target(7, 1, {
        // NOTE: when changing these timings, LANDING_ANIMATION_DURATION in index.njk must be adjusted too!
        animation: .305s .126s * pow(@it + 1, (1 / 1.375)) textWaveLanding ease backwards;
      });
      .wave.keyframe.textWaveLanding();
    }

    .wave.generate-targets(7, wave, {
      // this is a root function to approximate an ease-in
      animation: .37s .13s * pow(@it, (1 / 1.375)) textWave ease;
    });
    .wave.keyframe.textWave();

    // --- media queries ---
    @media (max-width: 880px) {
      font-size: calc(10vw + .5vh + 35.9px);
    }
    #for(3, {
      // @index is 1-based
      @max-width: 680px - 80px * @index;
      @length: 8 - @index;
      @media (max-width: @max-width) {
        .drop-shadow(@length, hsl(0, 0%, 62%));
        html.light-mode & {
          .drop-shadow(@length, @heading-shadow--lt);
        }
        .wave.keyframe.textWaveLanding(8 - @index);
        .wave.keyframe.textWave(9 - @index);
      }
    });
  }
  .subheader {
    position: absolute;
    bottom: calc((100% - @h1-font-size * 1.2) / 4);
    white-space: nowrap;
    .mode-transition.background();
    .mode-transition.color();
  }

  html.light-mode & {
    color: @heading--lt;
    h1 {
      .drop-shadow(8, @heading-shadow--lt);
    }
  }
}

#gbl-box-menu {
  padding-top: 1.75em;
  padding-bottom: 1.75em;
  height: auto;
  .box {
    .box-animation-loop();
    .box-animation-loop(@amount: 5, @seconds: .5s, @it: 1) when (@it < @amount + 1) {
      &:nth-child(@{it}) {
        .boxanimation(@seconds);
      }
      .box-animation-loop(@amount, @seconds + .08s, @it + 1);
    }
    @keyframes shiftinBox {
      from {
        transform: translateY(-17px);
      }
    }
  }
}
