body {
  /* step 1 purple with 75/255 step 2 purple */ /* Step 1 brown brown with 35/255 step 2 brown brown */
  background: linear-gradient(to bottom right, #504358, #6A412F); /* #483F50, #553A47 */ /* #4F4257, #493639 */
}

.box {
  display: flex;
  width: 100%;
  height: 100%;
  background-color: hsl(0, 0%, 11.4%);
  flex-direction: row;
  overflow: hidden;
  position: relative;
}

/* The glb_box header but just a header isn't worth loading it all */

.box_header .header_text {
  padding: 38px 21px;
  font-family: Arial, sans-serif;
  text-transform: uppercase;
  display: inherit;
  line-height: 0;
  color: #575757;
}

/* This is the absolute 3D-executing container in 3DMagic */

#output_container {
  position: relative;
  z-index: 5;
  overflow: hidden; /*woooaaah*/
  grid-row: -3 / -2;
  perspective: 2500px /*wooooooaaaaahh*/
}
#output_container.nogrid {
  position: absolute;
  top: 152px; /* calc(77px + 75px); -> first input_box (with margin) (*1) + last input_box (no margin) */
  bottom: 0;
  left: 0;
  right: 0;
}

/* The 2 separations of 3DMagic, code_container for the editor, execute_container for the executables */

.code_container, .execute_container {
  display: grid;
}
.execute_container {
  position: relative;
  width: 100%;
  grid-template-rows: auto auto 1fr auto;
}
.code_container {
  position: relative;
  height: 100%;
  font-size: 18px;
  grid-template-rows: auto 1fr;
}
.code_container .floating_button {
  background-color: hsl(0, 0%, 16.4%);
  color: hsl(0, 0%, 59%);
  border-top: 2px solid hsl(0, 0%, 20%);
  border-bottom: 2px solid hsl(0, 0%, 15.4%);
  box-shadow: 1px 1px 2px hsla(0, 0%, 11%, 0.83);
}
.execute_container .floating_button {
  background-color: hsl(0, 0%, 17%);
  color: hsl(0, 0%, 60%);
  border-top: 2px solid hsl(0, 0%, 21%);
  border-bottom: 2px solid hsl(0, 0%, 16.4%);
  box-shadow: 1px 1px 2px hsla(0, 0%, 10.3%, 0.83);
}
.code_container .floating_button {
  right: 20px;
}
.execute_container .floating_button {
  left: 12px;
}
.code_container .resize_bar {
  position: absolute;
  right: -4px;
  bottom: 0;
  top: 0;
  width: 8px;
  transition: .15s cubic-bezier(.15, .08, .3, 1);
  cursor: ew-resize;
  z-index: 6;
}
.code_container.docked .resize_bar {
  background-color: hsl(0, 0%, 8%);
  opacity: .74;
}
.code_container.docked.left .resize_bar {
  right: -8px;
}
.code_container.docked.right .resize_bar {
  right: 0;
}
.code_container .resize_bar:hover {
  background-color: hsl(0, 0%, 7%);
  opacity: .74;
}
.code_container .CodeMirror {
  height: auto;
  width: 500px;
  grid-row: -2 / -1;
  font-family: 'Courier New', monospace;
}
.code_container .CodeMirror.resizing {
  transition: .22s cubic-bezier(0,0,.4,1); /* .2s cubic-bezier(.3, .1, .2, 1) */
}
.code_container .CodeMirror .CodeMirror-overlayscroll-vertical {
  right: 4px;
}
.code_container.docked.right .CodeMirror .CodeMirror-overlayscroll-vertical {
  right: 8px;
}

/* The popout appearing when the code area is fully extended */

#output_container.popout {
  left: -390px;
  top: 107px !important; /*TODO: but only if the screen is actually wide enough*/
  width: 360px;
  height: 360px;
  position: absolute;
  grid-row: 1 / -1;
  border-radius: 2px;
  box-shadow: 0 2px 1px hsl(0, 0%, 8%), 0.5px 1.5px 5px hsl(0, 0%, 9.3%);
  animation: popoutpopup .15s cubic-bezier(.3,0,.5,1.3);
}
@keyframes popoutpopup {
  from { transform: scale(0); }
  to   { transform: scale(1); }
}
#output_container.popout.default {
  background-color: hsla(0, 0%, 13%, .7);
  border-top: 2px solid hsla(0, 0%, 29%, .7);
  border-bottom: 2px solid hsla(0, 0%, 10.5%, .7);
}
#output_container.popout.opaque {
  background-color: hsl(0, 0%, 12%);
  border-top: 2px solid hsl(0, 0%, 26%);
  border-bottom: 2px solid hsl(0, 0%, 11%);
}
#output_container.popout.collapsed {
  width: 0;
  height: 0;
  left: -50vw;
  top: 50vh !important;
  overflow: visible;
}
#output_container.popout.disabled {
  display: none;
}
#output_container.popout .legend_container {
  display: none;
}

/* The floating buttons at the bottom corners of the 2 separate sections of 3DMagic to quick-resize them */

.floating_button {
  position: absolute;
  bottom: 15px;
  width: 25px;
  height: 25px;
  font-size: 25px;
  line-height: 0;
  border-radius: 1px;
  box-sizing: border-box;
  z-index: 11;
  cursor: pointer;

  opacity: 1;
  transform: translateX(0);
  transition: opacity .27s, transform .27s ease-out;
}
.floating_button.hidden {
  visibility: hidden;
  opacity: 0;
  transition: all .27s;
}
.code_container .floating_button.expand.hidden {
  transform: translateX(25px);
}
.execute_container .floating_button.expand.hidden {
  transform: translateX(-25px);
}
.code_container .floating_button.restore.hidden {
  transform: translateX(-25px);
}
.execute_container .floating_button.restore.hidden {
  transform: translateX(25px);
}
.floating_button.restore {
  font-size: 22px;
  overflow: hidden;
  border-left: 2px solid transparent;
  border-right: 2px solid transparent;
}
.floating_button.restore span {
  position: relative;
}
.floating_button.restore .to_right {
  right: -2.6px;
}
.floating_button.restore .to_left {
  left: -2.6px;
}

/* Specific values for the multiple-choice input */
.color_mark_x {
  color: #A84E4E;
}
.color_mark_y {
  color: #469870;
}
.color_mark_z {
  color: #1398A9;
}

/* Ultra-global values specifically for 3DMagic (or any other project using 3D but I don't think that will happen) */

.face {
  position: absolute;
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
}
/*.face.outline {
  box-shadow: 0 0 0 1px inset hsl(0, 0%, 30%);
}*/
.container_3d {
  transform-style: preserve-3d;
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
}
.container_only_3d {
  transform-style: preserve-3d;
}

/* 3DMagic */

.color_north {
  background-color: #A84E4E;
}
.color_south {
  background-color: #046CA5;
}
.color_west {
  background-color: #CDA544;
}
.color_east {
  background-color: #777922;
}
.color_up {
  background-color: #AC724A;
}
.color_down {
  background-color: #664D6E;
}

.legend_container {
  position: absolute;
  left: 40px;
  top: 25px;
  color: hsl(0, 0%, 58%);
  font-size: .88em;
  font-family: Calibri, Arial, sans-serif;
  opacity: .85;
}
.color_legend {
  margin: 2px 0 1px 5px;
  display: flex;
  align-items: center;
}
.color_preview {
  content: '';
  position: absolute;
  left: -1em;
  width: 1em;
  height: 1em;
  border-radius: 1px;
}

.error_banner {
  display: flex;
  align-items: center;
  grid-row: -2 / -1;
  padding: 5px 5px 5px 36px;
  color: hsl(0, 0%, 60%);
  font-size: 1.2em;
  background-color: hsl(0, 0%, 12.5%);
  border-top: 3px solid hsl(0, 0%, 27%);
}
.error_banner .exclamation {
  display: inline-block;
  font-size: 3em;
  padding: 5px;
  font-family: 'Century Gothic', Calibri, Arial, sans-serif;
  line-height: .82em;
}

.elements_container {
  transform: translateX(-200px) translateZ(-200px) translateY(200px);
}

/* Stuff for the actual model and its surroundings */

.element .face {
  image-rendering: -moz-crisp-edges;
}

.aid_stripe.end {
  width: 2px;
  height: 2px;
}
.aid_stripe.side {
  height: 2px;
}

.boundary_container_2d .object_2d {
  position: absolute;
  height: 400px;
  width: 400px;
  background-size: 400px 400px !important;
}
.boundary_container_2d .boundary {
  opacity: .4;
}

.boundary_container_2d .bottom_grid .var_bottom {
  background: url('/image/tools/enfloorment.png');
}
.boundary_container_2d .bottom_grid .var_bottom {
   transform: rotateX(90deg) translateX(-200px);
}

.boundary_container_2d .axes .var_axis.x {
  background: url('/image/tools/enaxesxness.png');
}
.boundary_container_2d .axes .var_axis.y {
  background: url('/image/tools/enaxesyness.png');
}
.boundary_container_2d .axes .var_axis.z {
  background: url('/image/tools/enaxeszness.png');
}
.boundary_container_2d .axes .var_axis.x.ver_1 {
  transform: translateX(-200px) translateY(-200px);
}
.boundary_container_2d .axes .var_axis.y.ver_1 {
  transform: translateX(-200px) translateY(-200px);
}
.boundary_container_2d .axes .var_axis.z.ver_1 {
  transform: translateX(-200px) translateY(-200px) rotateY(90deg);
}
.boundary_container_2d .axes .var_axis.x.ver_2 {
  transform: translateX(-200px) translateY(-200px) rotateX(90deg);
}
.boundary_container_2d .axes .var_axis.y.ver_2 {
  transform: translateX(-200px) translateY(-200px) rotateY(90deg);
}
.boundary_container_2d .axes .var_axis.z.ver_2 {
  transform: translateX(-200px) translateY(-200px) rotateY(90deg) rotateX(90deg);
}

.boundary_container_2d .var_corner {
  background: url('/image/tools/enborderment.png');
}
.boundary_container_2d .corners .object_1 {
  transform: translateX(-200px) translateY(-200px) translateZ(200px);
}
.boundary_container_2d .corners .object_2 {
  transform: rotateZ(90deg) translateX(-200px) translateY(200px) translateZ(-200px);
}
.boundary_container_2d .corners .object_3 {
  transform: rotateY(90deg) rotateX(180deg) translateY(200px);
}
.boundary_container_2d .corners .object_4 {
  transform: rotateY(90deg) translateY(-200px) translateZ(-400px);
}
.boundary_container_2d .corners .object_5 {
  transform: rotateX(90deg) translateX(-200px);
}
.boundary_container_2d .corners .object_6 {
  transform: rotateX(90deg) translateX(-200px) translateZ(400px);
}

.boundary {
  background-color: hsla(0, 0%, 45%, .35)
}
.boundary_container .corners .corner_1 {
  transform: translateX(-200px) translateY(200px) translateZ(200px) rotateX(90deg);
}
.boundary_container .corners .corner_2 {
  transform: rotateX(180deg) translateX(-200px) rotateY(180deg) translateY(200px) translateZ(200px) rotateY(180deg);
}
.boundary_container .corners .corner_3 {
  transform: rotateZ(180deg) translateX(-200px) translateY(200px) translateZ(200px) rotateX(90deg);
}
.boundary_container .corners .corner_4 {
  transform: rotateY(180deg) translateX(-200px) rotateY(180deg) translateY(200px) translateZ(200px) rotateY(180deg);
}
.boundary_container .corners .corner_5 {
  transform: rotateX(180deg) translateX(-200px) rotateZ(180deg) translateY(200px) translateZ(200px) rotateY(180deg);
}
.boundary_container .corners .corner_6 {
  transform: translateX(-200px) rotateX(180deg) translateY(200px) translateZ(200px) rotateX(90deg);
}
.boundary_container .corners .corner_7 {
  transform: rotateZ(180deg) translateX(-200px) rotateY(180deg) translateY(200px) translateZ(200px) rotateY(180deg)
}
.boundary_container .corners .corner_8 {
  transform: rotateZ(180deg) translateX(-200px) rotateX(180deg) translateY(200px) translateZ(200px) rotateX(90deg)
}
.boundary_container .corners .stripe_1 {
  transform: translateZ(50px);
}
.boundary_container .corners .stripe_2 {
  transform: rotateX(90deg) translateZ(50px);
}
.boundary_container .corners .stripe_3 {
  transform: rotateY(90deg) translateZ(50px);
}
.boundary.var_corner.side {
  width: 100px;
}
.boundary.var_corner.front {
  transform: rotateZ(180deg) translateZ(50px) translateX(1px) translateY(1px);
}
.boundary.var_corner.behind {
  transform: rotateX(180deg) rotateZ(90deg) translateZ(50px) translateX(1px) translateY(1px);
}
.boundary.var_corner.left {
  transform: rotateY(90deg) translateY(-1px) translateZ(-50px) rotateX(180deg) translateZ(1px);
}
.boundary.var_corner.right {
  transform: rotateY(90deg) translateY(-1px) translateZ(-49px);
}
.boundary.var_corner.bottom {
  transform: rotateX(90deg) rotateZ(90deg) translateZ(1px) rotateY(180deg) translateZ(1px) translateY(50px);
}
.boundary.var_corner.top {
  transform: rotateX(90deg) rotateZ(90deg) translateZ(2px) translateY(50px);
}

.boundary_container .bottom_grid .stripe_1 {
  transform: translateY(200px) translateX(-200px);
}
.boundary_container .bottom_grid .stripe_2 {
  transform: translateY(200px) translateX(-175px);
}
.boundary_container .bottom_grid .stripe_3 {
  transform: translateY(200px) translateX(-150px);
}
.boundary_container .bottom_grid .stripe_4 {
  transform: translateY(200px) translateX(-125px);
}
.boundary_container .bottom_grid .stripe_5 {
  transform: translateY(200px) translateX(-100px);
}
.boundary_container .bottom_grid .stripe_6 {
  transform: translateY(200px) translateX(-75px);
}
.boundary_container .bottom_grid .stripe_7 {
  transform: translateY(200px) translateX(-50px);
}
.boundary_container .bottom_grid .stripe_8 {
  transform: translateY(200px) translateX(-25px);
}
.boundary_container .bottom_grid .stripe_9 {
  transform: translateY(200px);
}
.boundary_container .bottom_grid .stripe_10 {
  transform: translateY(200px) translateX(25px);
}
.boundary_container .bottom_grid .stripe_11 {
  transform: translateY(200px) translateX(50px);
}
.boundary_container .bottom_grid .stripe_12 {
  transform: translateY(200px) translateX(75px);
}
.boundary_container .bottom_grid .stripe_13 {
  transform: translateY(200px) translateX(100px);
}
.boundary_container .bottom_grid .stripe_14 {
  transform: translateY(200px) translateX(125px);
}
.boundary_container .bottom_grid .stripe_15 {
  transform: translateY(200px) translateX(150px);
}
.boundary_container .bottom_grid .stripe_16 {
  transform: translateY(200px) translateX(175px);
}
.boundary_container .bottom_grid .stripe_17 {
  transform: translateY(200px) translateX(200px);
}
.boundary_container .bottom_grid .horizontal {
  transform: rotateY(90deg);
}
.boundary.var_bottom.side {
  width: 400px;
}
.boundary.var_bottom.front {
  transform: rotateZ(180deg) translateZ(200px) translateX(1px) translateY(1px);
}
.boundary.var_bottom.behind {
  transform: rotateX(180deg) rotateZ(90deg) translateZ(200px) translateX(1px) translateY(1px);
}
.boundary.var_bottom.left {
  transform: rotateY(90deg) translateY(-1px) translateZ(-200px) rotateX(180deg) translateZ(1px);
}
.boundary.var_bottom.right {
  transform: rotateY(90deg) translateY(-1px) translateZ(-199px);
}
.boundary.var_bottom.bottom {
  transform: rotateX(90deg) rotateZ(90deg) translateZ(1px) rotateY(180deg) translateZ(1px) translateY(200px);
}
.boundary.var_bottom.top {
  transform: rotateX(90deg) rotateZ(90deg) translateZ(2px) translateY(200px);
}

.color_x, .axisbutton.x.active .knob {
  background-color: #784452 !important;
}
.color_y, .axisbutton.y.active .knob {
  background-color: #1F6C6B !important;
}
.color_z, .axisbutton.z.active .knob {
  background-color: #046CA5 !important;
}

.axes_container {
  transform: rotateX(180deg);
}
.axes_y {
  transform: rotateX(90deg);
}
.axes_x {
  transform: rotateY(90deg);
}

.axis.side {
  width: 350px;
}
.axis.front {
  transform: rotateZ(180deg) translateZ(175px) translateX(1px) translateY(1px);
}
.axis.behind {
  transform: rotateX(180deg) rotateZ(90deg) translateZ(175px) translateX(1px) translateY(1px);
}
.axis.left {
  transform: rotateY(90deg) translateY(-1px) translateZ(-175px) rotateX(180deg) translateZ(1px);
}
.axis.right {
  transform: rotateY(90deg) translateY(-1px) translateZ(-174px);
}
.axis.bottom {
  transform: rotateX(90deg) rotateZ(90deg) translateZ(1px) rotateY(180deg) translateZ(1px) translateY(175px);
}
.axis.top {
  transform: rotateX(90deg) rotateZ(90deg) translateZ(2px) translateY(175px);
}
